% number of layers
L=7;
% number of sites, 1 -> 2 -> ... -> 2^(L-1)
N=2^L-1;
% exclude layers 1 and 2
N=N-1-2;
% adjacency matrix
A=zeros(N,N);
for l1=3:L % start at layer 3 because we exclude lower layers, see below as well
    for s1=1:2^(l1-1)
        for l2=3:L
            for s2=1:2^(l2-1)
                prev1=0;
                for k1=3:l1-1
                    prev1=prev1+2^(k1-1);
                end
                ind1=prev1+s1;
                prev2=0;
                for k2=3:l2-1
                    prev2=prev2+2^(k2-1);
                end
                ind2=prev2+s2;
                if l1==l2
                    if abs(s1-s2)==1
                        A(ind1,ind2)=1;
                    end
                    % add pbc
                    if l1>1
                        if abs(s1-s2)==2^(l1-1)-1
                            A(ind1,ind2)=1;
                        end
                    end
                end
                if l2==l1+1
                    if s2==2*s1
                        A(ind1,ind2)=1;
                    end
                    if s2==2*s1-1
                        A(ind1,ind2)=1;
                    end
                end
                if l1==l2+1
                    if s1==2*s2
                        A(ind1,ind2)=1;
                    end
                    if s1==2*s2-1
                        A(ind1,ind2)=1;
                    end
                end
                
            end
        end
    end
end
D=zeros(N,N);
for ind1=1:N
    tmp=sum(A(ind1,:));
    D(ind1,ind1)=tmp;
end
% measured region is all layers less than the last
meas_set=linspace(1,N-2^(L-1),N-2^(L-1))';
un_set=linspace(N-2^(L-1)+1,N,2^(L-1))';
% initial Gamma
%Gamma_0=eye(N);
mu_A=1;
mu_B=1;
Gamma_0=zeros(N,N);
Gamma_0(un_set,un_set)=mu_A*eye(length(un_set));
Gamma_0(meas_set,meas_set)=mu_B*eye(length(meas_set));
J=A;
%J=sqrtm(D-A);
t=32;
Gamma=Gamma_0+1i*J*t;
% post measurement 
GammaAA=Gamma(un_set,un_set);
GammaAB=Gamma(un_set,meas_set);
GammaBA=Gamma(meas_set,un_set);
GammaBB=Gamma(meas_set,meas_set);
Gamma_post=GammaAA-GammaAB*mpower(GammaBB,-1)*GammaBA;
bdy_length=2^(L-1);
% the off diagonal terms must not be zero in general
%cov_mera_quench=(1/2)*[mpower(real(Gamma_post),-1) zeros(bdy_length,bdy_length); zeros(bdy_length,bdy_length) mpower(real(mpower(Gamma_post,-1)),-1)];
cov_xx=(1/2)*mpower(real(Gamma_post),-1);
cov_pp=(1/2)*mpower(real(mpower(Gamma_post,-1)),-1);
%cov_xp=1i*cov_xx*Gamma_post.';
%cov_px=(cov_xp).'-1i*eye(bdy_length);
cov_xp_sym=1i*cov_xx*Gamma_post.'-1i*eye(bdy_length)/2;
%cov_mera_quench=[cov_xx cov_xp; cov_px cov_pp];
cov_mera_quench=[cov_xx cov_xp_sym; cov_xp_sym.' cov_pp];
%norm(cov_mera_quench-cov_mera_quench.')
S=zeros(bdy_length-1,1);
for r=1:bdy_length-1
    tmp_ind=linspace(1,r,r)';
    S(r)=von_neumann_entropy_alt(extract_subsystem_covariance(cov_mera_quench,tmp_ind));
end
x_bdy=linspace(1,bdy_length-1,bdy_length-1)';
figure()
f1=fit(log(sin(pi*x_bdy/bdy_length)),S,'poly1');
plot(x_bdy,S,'ko',x_bdy,f1(log(sin(pi*x_bdy/bdy_length))),'r-','linewidth',2);
plot_darkmode % new - 5/7
% evidence for ln(t) scaling of the entanglement
